1

import axios from 'axios'
  import React, { ChangeEvent, useEffect, useState } from 'react'
  import ReactDOM from 'react-dom/client';

  // Types
  type CommentType = {
      postId: number
      id: number
      name: string
      email: string
      body: string
  }

  // Api
  const instance = axios.create({
      baseURL: 'https://jsonplaceholder.typicode.com/'
  })

  const commentsAPI = {
      getComments() {
          return instance.get<CommentType[]>('comments?_limit=10')
      },
      createComment(body: string) {
          const payload = {
              body,
              email: 'test@gmail.com',
              name: 'Name',
              postId: Math.random()
          }
          // Promise.resolve() —Å—Ç–æ–∏—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–≥–ª—É—à–∫–∏, —á—Ç–æ–±—ã TS –Ω–µ —Ä—É–≥–∞–ª—Å—è –∏ –∫–æ–¥ –∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–ª—Å—è
          // Promise.resolve() –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
          return Promise.resolve()
      }
  }


  // App
  export const App = () => {

      const [comments, setComments] = useState<CommentType[]>([])
      const [commentBody, setCommentBody] = useState('')

      useEffect(() => {
          commentsAPI.getComments()
              .then((res) => {
                  setComments(res.data)
              })
      }, [])

      const createPostHandler = () => {
          commentsAPI.createComment(commentBody)
              .then((res: any) => {
                  const newComment = res.data
                  setComments([newComment, ...comments])
                  setCommentBody('')
              })
      };

      const createTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {
          setCommentBody(e.currentTarget.value)
      };

      return (
          <>
              <h1>üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h1>

              <div style={{marginBottom: '15px'}}>
                  <input style={{width: '300px'}}
                         type="text"
                         value={commentBody}
                         placeholder={'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç—Ä–∞—Ä–∏–π'}
                         onChange={createTitleHandler}
                  />
                  <button style={{marginLeft: '15px'}}
                          onClick={() => createPostHandler()}>
                      –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                  </button>
              </div>

              {
                  comments.map(c => {
                      return <div key={c.id}><b>Comment</b>: {c.body} </div>
                  })
              }
          </>
      )
  }

  const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
  root.render(<App/>)

  // –û–ø–∏—Å–∞–Ω–∏–µ:
  // –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
  // –¢–∏–ø–∏–∑–∞—Ü–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ –∏ —É–∫–∞–∑–∞—Ç—å (–≤ –æ—Ç–≤–µ—Ç–∞—Ö —É—á—Ç–µ–Ω—ã –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞).
  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
  // –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: return Promise.resolve<PostType[]>(data)
//         return instance.get('comments?_limit=10') ? –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π

2


import axios from 'axios'
import React, { useEffect, useState } from 'react'
import ReactDOM from 'react-dom/client'

// Types
type PhotoType = {
    albumId: number
    id: number
    title: string
    url: string
    thumbnailUrl: string
}


// Api
const instance = axios.create({
    baseURL: 'https://jsonplaceholder.typicode.com/'
})

const photosAPI = {
    getPhotos(page: number) {
        return instance.get<PhotoType[]>(`photos?_limit=2?_page${page}`)
    }
}


// App

const buttons = [
    {id: 1, title: '1'},
    {id: 2, title: '2'},
    {id: 3, title: '3'},
]

export const App = () => {

    const [photos, setPhotos] = useState<PhotoType[]>([])
    const [currentPage, setCurrentPage] = useState(1)

    useEffect(() => {
        photosAPI.getPhotos(currentPage)
            .then((res) => {
                setPhotos(res.data)
            })
    }, [currentPage])

    const setPageHandler = (page: number) => {
        setCurrentPage(page)
    };

    return (
        <>
            <h1>üì∏ –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–∫</h1>
            {/* Photos */}
            {
                photos.map(p => {
                    return <div style={{marginBottom: '25px'}} key={p.id}>
                        <b>title</b>: {p.title}
                        <div><img src={p.thumbnailUrl} alt=""/></div>
                    </div>
                })
            }

            {/* Buttons */}
            {
                buttons.map(b => {
                    return (
                        <button key={b.id}
                                style={b.id === currentPage ? {backgroundColor: 'lightblue'} : {}}
                                onClick={() => setPageHandler(b.id)}>
                            {b.title}
                        </button>
                    )
                })
            }
        </>
    )
}


const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(<App/>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
// –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º, –∫–æ–Ω—Ç–µ–Ω—Ç (–æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ç–æ–∫) –¥–æ–ª–∂–µ–Ω –º–µ–Ω—è—Ç—å—Å—è.
// –ü–æ–¥—Å–∫–∞–∑–∫–∞. –í –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–æ–¥–∞ –¥–æ–ø—É—â–µ–Ω–æ 2 –æ—à–∏–±–∫–∏.
// –ó–∞–¥–∞—á–∞: –Ω–∞–π—Ç–∏ —ç—Ç–∏ –æ—à–∏–±–∫–∏, –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: const [currentPage, setCurrentPage] = useState(page)
//         return instance.get<PhotoType[]>(`photos?_limit=2&_page=${page}`) +


3


import React, { useEffect } from 'react'
import ReactDOM from 'react-dom/client';
import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
import axios from 'axios';


// Types
type PostType = {
    body: string
    id: number
    title: string
    userId: number
}

// Api
const instance = axios.create({
    baseURL: 'https://jsonplaceholder.typicode.com/'
})

const postsAPI = {
    getPosts() {
        return instance.get<PostType[]>('posts?_limit=10')
    },
    createPost() {
        const payload = {
            body: 'new post body',
            title: 'new post title',
            userId: 1
        }
        return instance.post('posts', payload)
    }
}

// Reducer
const initState = [] as PostType[]

type InitStateType = typeof initState

const postsReducer = (state: InitStateType = initState, action: ActionsType) => {
    switch (action.type) {
        case 'POSTS/GET-POSTS':
            return action.posts

        case 'POSTS/CREATE-POST':
            return [action.post, ...state]

        default:
            return state
    }
}


const getPostsAC = (posts: PostType[]) => ({type: 'POSTS/GET-POSTS', posts} as const)
const createPostAC = (post: PostType) => ({type: 'POSTS/CREATE-POST', post} as const)

type ActionsType = ReturnType<typeof getPostsAC> | ReturnType<typeof createPostAC>

const getPostsTC = (): AppThunk => (dispatch) => {
    postsAPI.getPosts()
        .then((res) => {
            dispatch(getPostsAC(res.data))
        })
}

const addPostTC = (): AppThunk => (dispatch) => {
    postsAPI.createPost()
        .then((res) => {
            dispatch(createPostAC(res.data))
        })
}

// Store
const rootReducer = combineReducers({
    posts: postsReducer,
})

const store = createStore(rootReducer, applyMiddleware(thunk))
type RootState = ReturnType<typeof store.getState>
type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
const useAppDispatch = () => useDispatch<AppDispatch>()
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector


// App
const App = () => {
    const dispatch = useAppDispatch()
    const posts = useAppSelector(state => state.posts)

    useEffect(() => {
        dispatch(getPostsTC())
    }, [])

    const addPostHandler = () => {
        alert('–ü–æ—Å—Ç –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ üöÄ')
    };

    return (
        <>
            <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
            <button style={{marginBottom: '10px'}} onClick={addPostHandler}>–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç</button>
            {
                posts.map(p => {
                    return <div key={p.id}><b>title</b>: {p.title}</div>
                })
            }
        </>
    )
}

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(<Provider store={store}> <App/></Provider>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç" –ø–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å—Å—è,
// –Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è alert.
// –í–º–µ—Å—Ç–æ alerta –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ—Å—Ç –¥–æ–±–∞–≤–ª—è–ª—Å—è.
// –ü—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: return instance.get<PostType[]>('posts?_limit=10')
//         dispatch(addPostTC()) +


4


import axios from 'axios'
import React, { useEffect } from 'react'
import ReactDOM from 'react-dom/client';
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux';
import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';

// Types
type CommentType = {
    postId: number
    id: number
    name: string
    email: string
    body: string
}

// Api
const instance = axios.create({
    baseURL: 'https://jsonplaceholder.typicode.com/'
})

const commentsAPI = {
    getComments() {
        return instance.get<CommentType[]>('comments?_limit=10')
    }
}

// Reducer
const initState = [] as CommentType[]

type InitStateType = typeof initState

const commentsReducer = (state: InitStateType = initState, action: ActionsType) => {
    switch (action.type) {
        case 'COMMENTS/GET-COMMENTS':
            return action.comments
        default:
            return state
    }
}

const getCommentsAC = (comments: CommentType[]) => ({type: 'COMMENTS/GET-COMMENTS', comments} as const)
type ActionsType = ReturnType<typeof getCommentsAC>

const getCommentsTC = (): ThunkAction<any, any, any, any> => (dispatch) => {
    commentsAPI.getComments()
        .then((res) => {
            dispatch(getCommentsAC(res.data))
        })
}


// Store
const rootReducer = combineReducers({
    comments: commentsReducer,
})

const store = createStore(rootReducer, applyMiddleware(thunk))
type RootState = ReturnType<typeof store.getState>
type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
const useAppDispatch = () => useDispatch<AppDispatch>()
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector

// App
export const App = () => {

    const comments = useAppSelector(state => state.comments)
    const dispatch = useAppDispatch()

    useEffect(() => {
        dispatch(getCommentsTC())
    }, [])

    return (
        <>
            <h1>üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h1>
            {
                comments.map(c => {
                    return <div key={c.id}><b>Comment</b>: {c.body} </div>
                })
            }
        </>
    )
}


const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(<Provider store={store}> <App/></Provider>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å—Ç–æ–∏—Ç –≤ —Ç–æ–º —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –≤ –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤—ã–π —Ç–∏–ø ThunkAction<any, any, any, any>.
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ any, any, any, any —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å thunk creator?
// –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: unknown status isDone void
// ++ void ...


5


import React, { useEffect } from 'react'
import ReactDOM from 'react-dom/client';
import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
import axios from 'axios';

// Types
type PostType = {
    body: string
    id: number
    title: string
    userId: number
}

// Api
const instance = axios.create({
    baseURL: 'https://jsonplaceholder.typicode.com/'
})

const postsAPI = {
    getPosts() {
        return instance.get<PostType[]>('posts?_limit=15')
    },
    updatePostTitle(post: PostType) {
        return instance.put<PostType>(`posts/${post.id}`, post)
    }
}


// Reducer
const initState = [] as PostType[]

type InitStateType = typeof initState

const postsReducer = (state: InitStateType = initState, action: ActionsType) => {
    switch (action.type) {
        case 'POSTS/GET-POSTS':
            return action.posts

        case 'POSTS/UPDATE-POST-TITLE':
            return state.map((p) => {
                if (p.id === action.post.id) {
                    return {...p, title: action.post.title}
                } else {
                    return p
                }
            })

        default:
            return state
    }
}

const getPostsAC = (posts: PostType[]) => ({type: 'POSTS/GET-POSTS', posts} as const)
const updatePostTitleAC = (post: PostType) => ({type: 'POSTS/UPDATE-POST-TITLE', post} as const)
type ActionsType = ReturnType<typeof getPostsAC> | ReturnType<typeof updatePostTitleAC>

const getPostsTC = (): AppThunk => (dispatch) => {
    postsAPI.getPosts()
        .then((res) => {
            dispatch(getPostsAC(res.data))
        })
}

const updatePostTC = (postId: number): AppThunk => (dispatch, getState: any) => {
    try {
        const currentPost = getState().find((p: PostType) => p.id === postId)

        if (currentPost) {
            const payload = {...currentPost, title: '–õ–µ—Ç–∏–º üöÄ'}
            postsAPI.updatePostTitle(payload)
                .then((res) => {
                    dispatch(updatePostTitleAC(res.data))
                })
        }
    } catch (e) {
        alert('–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å üò¢')
    }

}

// Store
const rootReducer = combineReducers({
    posts: postsReducer,
})

const store = createStore(rootReducer, applyMiddleware(thunk))
type RootState = ReturnType<typeof store.getState>
type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
const useAppDispatch = () => useDispatch<AppDispatch>()
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector

// App
const App = () => {
    const dispatch = useAppDispatch()
    const posts = useAppSelector(state => state.posts)

    useEffect(() => {
        dispatch(getPostsTC())
    }, [])

    const updatePostHandler = (postId: number) => {
        dispatch(updatePostTC(postId))
    }

    return (
        <>
            <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
            {
                posts.map(p => {
                    return <div key={p.id}>
                        <b>title</b>: {p.title}
                        <button onClick={() => updatePostHandler(p.id)}>–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç</button>
                    </div>
                })
            }
        </>
    )
}

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(<Provider store={store}> <App/></Provider>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ alert —Å –æ—à–∏–±–∫–æ–π.
// Debugger / network / console.log –≤–∞–º –≤ –ø–æ–º–æ—â—å
// –ù–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: const payload = {...currentPost, tile: '–õ–µ—Ç–∏–º üöÄ'}
// –ü–æ–¥—Å–∫–∞–∑–∫–∞. –ò–∑–±–∞–≤—å—Ç–µ—Å—å –æ—Ç –≤—Å–µ—Ö any –∏ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç —Å–∞–º–æ —Å–æ–±–æ–π üòâ
// const currentPost = getState().posts.find((p: PostType) => { --


6


import React, { useEffect } from 'react'
import ReactDOM from 'react-dom/client';
import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk'
import axios, { AxiosError } from 'axios';


// Types
type PostType = {
    body: string
    id: number
    title: string
    userId: number
}

// Api
const instance = axios.create({
    baseURL: 'https://jsonplaceholder.typicode.com/ '
})

const postsAPI = {
    getPosts() {
        return instance.get<PostType[]>('posts')
    },
}

// Reducer
const initState = {
    error: null as string | null,
    posts: [] as PostType[]
}

type InitStateType = typeof initState

const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
    switch (action.type) {
        case 'POSTS/GET-POSTS':
            return {...state, posts: action.posts}

        case 'POSTS/SET-ERROR':
            return {...state, error: action.error}

        default:
            return state
    }
}


const getPostsAC = (posts: PostType[]) => ({type: 'POSTS/GET-POSTS', posts} as const)
const setError = (error: string | null) => ({type: 'POSTS/SET-ERROR', error} as const)
type ActionsType = ReturnType<typeof getPostsAC> | ReturnType<typeof setError>

// Thunk
const getPostsTC = (): AppThunk => (dispatch) => {
    postsAPI.getPosts()
        .then((res) => {
            dispatch(getPostsAC(res.data))
        })
        .catch((e: AxiosError) => {
        })
}


// Store
const rootReducer = combineReducers({
    app: appReducer,
})

const store = createStore(rootReducer, applyMiddleware(thunk))
type RootState = ReturnType<typeof store.getState>
type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
const useAppDispatch = () => useDispatch<AppDispatch>()
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector


// Components
export const App = () => {

    const dispatch = useAppDispatch()

    const posts = useAppSelector(state => state.app.posts)
    const error = useAppSelector(state => state.app.error)

    useEffect(() => {
        dispatch(getPostsTC())
    }, [])

    return (
        <>
            <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
            {
                posts.length
                    ?
                    posts.map(c => {
                        return <div key={c.id}><b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {c.body} </div>
                    })
                    :
                    <h3>‚ùå –ü–æ—Å—Ç—ã –Ω–µ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –í—ã–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–∞ —ç–∫—Ä–∞–Ω</h3>
            }
            <h2 style={{color: 'red'}}>{!!error && error}</h2>
        </>
    )
}

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(<Provider store={store}> <App/></Provider>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// ‚ùå –ü–æ—Å—Ç—ã –Ω–µ –ø–æ–¥–≥—Ä—É–∑–∏–ª–∏—Å—å. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞.
// –ß–∏–Ω–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ (–µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–±—è, –≤ –æ—Ç–≤–µ—Ç–µ —ç—Ç–æ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è).
// –ó–∞–¥–∞—á–∞: –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–∞ —ç–∫—Ä–∞–Ω.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∫–æ–¥—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç —ç—Ç–æ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: const store = createStore(rootReducer, applyMiddleware(thunk))
// dispatch(setError(e.message)) +

7



import React from 'react'
import ReactDOM from 'react-dom/client';
import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
import axios, { AxiosError } from 'axios';
import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';

// Types
type PhotoType = {
    albumId: number
    id: number
    title: string
    url: string
    thumbnailUrl: string
}

// Api
const instance = axios.create({
    baseURL: 'https://jsonplaceholder.typicode.com/'
})

const photosAPI = {
    async getPhotos() {
        // –ò–º–∏—Ç–∞—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –±—ã–ª–∞ –≤–∏–¥–Ω–∞ –∫—Ä—É—Ç–∏–ª–∫–∞
        await new Promise(resolve => setTimeout(resolve, 3000));
        return instance.get<PhotoType[]>('photos1?_limit=3')
    },
}


// Reducer
const initState = {
    isLoading: false,
    error: null as string | null,
    photos: [] as PhotoType[]
}

type InitStateType = typeof initState

const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
    switch (action.type) {
        case 'PHOTO/GET-PHOTOS':
            return {...state, photos: action.photos}
        case 'PHOTO/IS-LOADING':
            return {...state, isLoading: action.isLoading}
        case 'PHOTO/SET-ERROR':
            return {...state, error: action.error}
        default:
            return state
    }
}

const getPhotosAC = (photos: PhotoType[]) => ({type: 'PHOTO/GET-PHOTOS', photos} as const)
const setLoadingAC = (isLoading: boolean) => ({type: 'PHOTO/IS-LOADING', isLoading} as const)
const setError = (error: string | null) => ({type: 'PHOTO/SET-ERROR', error} as const)
type ActionsType =
    | ReturnType<typeof getPhotosAC>
    | ReturnType<typeof setLoadingAC>
    | ReturnType<typeof setError>

const getPhotosTC = (): AppThunk => (dispatch) => {
    dispatch(setLoadingAC(true))
    photosAPI.getPhotos()
        .then((res) => {
            dispatch(getPhotosAC(res.data))
        })
        .catch((e: AxiosError) => {
            dispatch(setError(e.message))
        })
}

// Store
const rootReducer = combineReducers({
    app: appReducer
})

const store = createStore(rootReducer, applyMiddleware(thunk))
type RootState = ReturnType<typeof store.getState>
type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
const useAppDispatch = () => useDispatch<AppDispatch>()
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector


// Loader
export const Loader = () => {
    return (
        <h1>Loading ...</h1>
    )
}

// App
const App = () => {
    const dispatch = useAppDispatch()

    const photos = useAppSelector(state => state.app.photos)
    const isLoading = useAppSelector(state => state.app.isLoading)
    const error = useAppSelector(state => state.app.error)

    const getPhotosHandler = () => {
        dispatch(getPhotosTC())
    };

    return (
        <>
            <h1>üì∏ –§–æ—Ç–æ</h1>
            <h2 style={{color: 'red'}}>{!!error && error}</h2>
            {isLoading && <Loader/>}
            {
                photos.map(p => {
                    return <div key={p.id}>
                        <b>title</b>: {p.title}
                        <div><img src={p.thumbnailUrl} alt=""/></div>
                    </div>
                })
            }
            <button onClick={getPhotosHandler}>–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</button>
        </>
    )
}


const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(<Provider store={store}> <App/></Provider>)


// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏" –ø–æ—è–≤–ª—è–µ—Ç—Å—è Loading... –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç–æ–º, —á—Ç–æ–±—ã —Å–ø—Ä—è—Ç–∞—Ç—å Loader –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä.
// –¢.–µ. –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç —É—Å–ø–µ—à–Ω—ã–π - Loader —É–±–∏—Ä–∞–µ–º
//      –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∏–¥–µ—Ç —Å –æ—à–∏–±–∫–æ–π - Loader —Ç–æ–∂–µ —É–±–∏—Ä–∞–µ–º.
// –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: .then(() =>  dispatch(getPhotosAC(res.data)))


8




import React, { useEffect } from 'react'
import ReactDOM from 'react-dom/client';
import { applyMiddleware, combineReducers, legacy_createStore as createStore, Dispatch } from 'redux'
import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk'
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
import axios, { AxiosError } from 'axios'

// TYPES
type UserType = {
    avatar: string
    email: string
    first_name: string
    id: 1
    last_name: string
}

type ColorType = {
    color: string
    id: number
    name: string
    pantone_value: string
    year: number
}

type CommonResponseType<T> = {
    total: number
    total_pages: number
    page: number
    per_page: number
    support: {
        url: string
        text: string
    }
    data: T
}

// API
const instance = axios.create({baseURL: 'https://reqres.in/api/'})

const reqresAPI = {
    getUsers() {
        return instance.get<CommonResponseType<UserType[]>>('users?delay=3')
    },
    getColors() {
        return instance.get<CommonResponseType<ColorType[]>>('colors?delay=3')
    }
}


// Reducer
const initState = {
    isLoading: false,
    error: null as string | null,
    users: [] as UserType[],
    colors: [] as ColorType[],
}

type InitStateType = typeof initState

const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
    switch (action.type) {
        case 'APP/GET-USERS':
            return {...state, users: action.users}
        case 'APP/GET-COLORS':
            return {...state, colors: action.colors}
        case 'APP/IS-LOADING':
            return {...state, isLoading: action.isLoading}
        case 'APP/SET-ERROR':
            return {...state, error: action.error}
        default:
            return state
    }
}

const getUsersAC = (users: UserType[]) => ({type: 'APP/GET-USERS', users} as const)
const getColorsAC = (colors: ColorType[]) => ({type: 'APP/GET-COLORS', colors} as const)
const setLoadingAC = (isLoading: boolean) => ({type: 'APP/IS-LOADING', isLoading} as const)
const setError = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)
type ActionsType =
    | ReturnType<typeof getUsersAC>
    | ReturnType<typeof getColorsAC>
    | ReturnType<typeof setLoadingAC>
    | ReturnType<typeof setError>

// Utils functions
function baseSuccessHandler<T>(dispatch: Dispatch, actionCreator: Function, data: T) {
    dispatch(actionCreator(data))
    dispatch(setLoadingAC(false))
}

// Thunk
const getUsersTC = (): AppThunk => (dispatch) => {
    dispatch(setLoadingAC(true))
    reqresAPI.getUsers()
        .then((res) => {
            // XXX
        })
        .catch((e: AxiosError) => {
            dispatch(setError(e.message))
            dispatch(setLoadingAC(false))
        })
}

const getColorsTC = (): AppThunk => (dispatch) => {
    dispatch(setLoadingAC(true))
    reqresAPI.getColors()
        .then((res) => {
            // YYY
        })
        .catch((e: AxiosError) => {
            dispatch(setError(e.message))
            dispatch(setLoadingAC(false))
        })
}

// Store
const rootReducer = combineReducers({
    app: appReducer,
})

const store = createStore(rootReducer, applyMiddleware(thunk))
type RootState = ReturnType<typeof store.getState>
type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
const useAppDispatch = () => useDispatch<AppDispatch>()
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector


// COMPONENTS
// Loader
export const Loader = () => {
    return (
        <h1>Loading ...</h1>
    )
}


const App = () => {
    return (
        <>
            <h1>Reqres API</h1>
            <Users/>
            <Colors/>
        </>
    )
}

const Users = () => {
    const dispatch = useAppDispatch()
    const users = useAppSelector(state => state.app.users)
    const error = useAppSelector(state => state.app.error)
    const isLoading = useAppSelector(state => state.app.isLoading)

    useEffect(() => {
        dispatch(getUsersTC())
    }, [])

    return (
        <div>
            <h2>Users</h2>
            {!!error && <h2 style={{color: 'red'}}>{error}</h2>}
            {isLoading && <Loader/>}
            <div style={{display: 'flex'}}>
                {
                    users.map(u => {
                        return (
                            <div key={u.id} style={{marginRight: '25px'}}>
                                <p>{u.first_name}</p>
                                <img src={u.avatar} alt=""/>
                            </div>
                        )
                    })
                }</div>
        </div>
    )
}

const Colors = () => {
    const dispatch = useAppDispatch()
    const colors = useAppSelector(state => state.app.colors)
    const error = useAppSelector(state => state.app.error)
    const isLoading = useAppSelector(state => state.app.isLoading)

    useEffect(() => {
        dispatch(getColorsTC())
    }, [])

    return (
        <div>
            <h2>Colors</h2>
            {!!error && <h2 style={{color: 'red'}}>{error}</h2>}
            {isLoading && <Loader/>}
            <div style={{display: 'flex'}}>
                {
                    colors.map(c => {
                        return (
                            <div key={c.id} style={{marginRight: '25px'}}>
                                <p>{c.name}</p>
                                <div style={{backgroundColor: c.color, width: '128px', height: '30px'}}>
                                    <b>{c.color}</b>
                                </div>
                            </div>
                        )
                    })
                }</div>
        </div>
    )
}

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(<Provider store={store}> <App/></Provider>)


// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Å–ø–∏—Å–æ–∫ Users, —Å–ø–∏—Å–æ–∫ Colors –∏ Loading ...
// –û—Ç–∫—Ä–æ–π—Ç–µ network –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ —á—Ç–æ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä —É—Ö–æ–¥—è—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —Å –¥–∞–Ω–Ω—ã–º–∏,
// –Ω–æ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ Loader.
// –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ —É—Ç–∏–ª–∏—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è baseSuccessHandler.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å Users –∏ Colors
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX –∏ YYY, —á—Ç–æ–±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É?
// –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: dispatch(baseSuccessHandler(1,2,3))  dispatch(baseSuccessHandler(3,2,1)
//baseSuccessHandler(dispatch, getUsersAC, res.data.data) baseSuccessHandler(dispatch, getColorsAC, res.data.data)
//



9




import { useFormik } from 'formik';
import React from 'react'
import ReactDOM from 'react-dom/client';
import { BrowserRouter, Route, Routes } from 'react-router-dom'


// Types
type LoginFieldsType = {
    firstName?: string
}

// Main
export const Login = () => {

    const formik = useFormik({
        initialValues: {
            firstName: '',
        },
        validate: (values) => {
            const errors: LoginFieldsType = {};
            return errors
        },
        onSubmit: values => {
            alert(JSON.stringify(values, null, 2));
        }
    });


    return (
        <form onSubmit={formik.handleSubmit}>
            <div>
                <input placeholder={'–í–≤–µ–¥–∏—Ç–µ –∏–º—è'} {...formik.getFieldProps('firstName')}/>
            </div>
            <button type="submit" disabled={!(formik.isValid && formik.dirty)}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        </form>
    );
}

// App
export const App = () => {
    return (
        <Routes>
            <Route path={''} element={<Login/>}/>
        </Routes>
    )
}

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(<BrowserRouter><App/></BrowserRouter>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –≤ –ø–æ–ª–µ firstName —Å–∏–º–≤–æ–ª—ã. –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" —Ä–∞–∑–¥–∏–∑–∞–±–ª–∏—Ç—Å—è.
// –ó–∞–¥–∞—á–∞: –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –¥–æ–ª–∂–Ω–∞ —Ä–∞–∑–¥–∏–∑–∞–±–ª–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–∞ –∏–º–µ–Ω–∏ –±–æ–ª—å—à–µ 5 —Å–∏–º–≤–æ–ª–æ–≤.
// –¢.–µ. –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ç—É –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—è firstName.
// ‚ùó –í –∫–∞—á–µ—Å—Ç–≤–µ —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ 'Must be 5 characters or more'
// ‚ùó –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–ª—è —Å–µ–±—è –ø–æ–∏–≥—Ä–∞—Ç—å—Å—è).
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ —Å —É—Å–ª–æ–≤–∏–µ–º.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: return errors.firstName = 'Must be 5 characters or more'
// ‚ùó –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä yup) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ
//             if(values.firstName.length < 5) return {errors: 'Must be 5 characters or more'}  ---




10



import { useFormik } from 'formik';
import React, { useEffect } from 'react'
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
import ReactDOM from 'react-dom/client';
import { BrowserRouter, Navigate, Route, Routes, useNavigate } from 'react-router-dom'
import axios, { AxiosError } from 'axios';
import { applyMiddleware, combineReducers, legacy_createStore as createStore, Dispatch } from 'redux';
import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';


// Types
type NullableType<T> = null | T
type UndefinedType<T> = undefined | T

type UserType = {
    avatar: string
    email: string
    first_name: string
    id: 1
    last_name: string
}

type LoginFieldsType = {
    email: string
    password: string
}

// API
const instance = axios.create({
    baseURL: 'https://reqres.in/api/'
})

const reqresAPI = {
    getUsers() {
        return instance.get('users?delay=1&per_page=12')
    },
    login(data: LoginFieldsType) {
        return instance.post('login?delay=1', data)
    },
}


// Reducer
const initState = {
    isLoading: false,
    error: null as NullableType<string>,
    isLoggedIn: false,
    randomUser: null as NullableType<UserType>
}

type InitStateType = typeof initState

const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
    switch (action.type) {
        case 'APP/SET-RANDOM-USER':
            return {...state, randomUser: action.user}
        case 'APP/SET-IS-LOGGED-IN':
            return {...state, isLoggedIn: action.isLoggedIn}
        case 'APP/IS-LOADING':
            return {...state, isLoading: action.isLoading}
        case 'APP/SET-ERROR':
            return {...state, error: action.error}
        default:
            return state
    }
}

// Actions
const setRandomUserAC = (user: UserType) => ({type: 'APP/SET-RANDOM-USER', user} as const)
const setIsLoggedIn = (isLoggedIn: boolean) => ({type: 'APP/SET-IS-LOGGED-IN', isLoggedIn} as const)
const setLoadingAC = (isLoading: boolean) => ({type: 'APP/IS-LOADING', isLoading} as const)
const setError = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)
type ActionsType =
    | ReturnType<typeof setRandomUserAC>
    | ReturnType<typeof setIsLoggedIn>
    | ReturnType<typeof setLoadingAC>
    | ReturnType<typeof setError>


// Utils
const thunkFinallyHandler = (dispatch: Dispatch) => {
    dispatch(setLoadingAC(false))
    setTimeout(() => {
        dispatch(setError(null))
    }, 3000)
}

// Thunk
const getUsersTC = (): AppThunk => (dispatch) => {
    dispatch(setLoadingAC(true))

    const getRandomUser = (users: UserType[]): UndefinedType<UserType> => {
        const randomUserId = Math.floor(Math.random() * 12) + 1
        return users.find(u => u.id === randomUserId)
    }

    reqresAPI.getUsers()
        .then((res) => {
            const user = getRandomUser(res.data.data)
            if (user) {
                dispatch(setRandomUserAC(user))
            }
        })
        .catch((e: AxiosError) => {
            dispatch(setError(e.message))
        })
        .finally(() => {
            thunkFinallyHandler(dispatch)
        })
}

const loginTC = (values: LoginFieldsType): AppThunk => (dispatch) => {
    dispatch(setLoadingAC(true))
    reqresAPI.login(values)
        .then((res) => {
            dispatch(setIsLoggedIn(true))
            alert('–í—ã –∑–∞–ª–æ–≥–∏–Ω–∏–ª–∏—Å—å —É—Å–ø–µ—à–Ω–æ')
        })
        .catch((e) => {
            const error = e.response ? (e.response?.data.error || 'Some error') : e.message
            dispatch(setError(error))
        })
        .finally(() => {
            thunkFinallyHandler(dispatch)
        })
}

// Store
const rootReducer = combineReducers({
    app: appReducer,
})

const store = createStore(rootReducer, applyMiddleware(thunk))
type RootState = ReturnType<typeof store.getState>
type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
const useAppDispatch = () => useDispatch<AppDispatch>()
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector


// Loader
export const Loader = () => {
    return <h1>Loading ...</h1>
}

// Profile
export const Profile = () => {
    return <h2>üòé Profile</h2>
}

// Login
export const Login = () => {

    const dispatch = useAppDispatch()
    const navigate = useNavigate()

    const randomUser = useAppSelector(state => state.app.randomUser)
    const isLoggedIn = useAppSelector(state => state.app.isLoggedIn)
    const error = useAppSelector(state => state.app.error)
    const isLoading = useAppSelector(state => state.app.isLoading)

    useEffect(() => {
        dispatch(getUsersTC())
    }, [])

    const formik = useFormik({
        initialValues: {
            email: randomUser?.email ?? '',
            password: '',
        },
        enableReinitialize: true,
        onSubmit: values => {
            dispatch(loginTC(values))
        }
    });

    return (
        <div>
            {!!error && <h2 style={{color: 'red'}}>{error}</h2>}
            {isLoading && <Loader/>}
            <form onSubmit={formik.handleSubmit}>
                <div>
                    <input placeholder={'–í–≤–µ–¥–∏—Ç–µ email'}
                           {...formik.getFieldProps('email')}/>
                </div>
                <div>
                    <input type={'password'}
                           placeholder={'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'}
                           {...formik.getFieldProps('password')}/>
                </div>
                <button type="submit">–ó–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è</button>
            </form>
        </div>
    );
}

// App
export const App = () => {
    return (
        <Routes>
            <Route path={''} element={<Login/>}/>
            <Route path={'profile'} element={<Profile/>}/>
        </Routes>
    )
}

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(<Provider store={store}><BrowserRouter><App/></BrowserRouter></Provider>)


// –û–ø–∏—Å–∞–Ω–∏–µ:
// ‚ùó –õ–æ–≥–∏–Ω –≤–≤–æ–¥–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ (–∏–∑-–∑–∞ Api –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ email).
// –í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –ø–∞—Ä–æ–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è.
// –ï—Å–ª–∏ –≤—ã —É–≤–∏–¥–µ–ª–∏ alert —Å —É—Å–ø–µ—à–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º -
// —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª.
// –ó–∞–¥–∞—á–∞: –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ª–æ–≥–∏–Ω–∏–∑–∞—Ü–∏–∏, —Ä–µ–¥–∏—Ä–µ–∫—Ç–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Profile.
// –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:  console.log('If login => redirect to profile')








