import React from 'react'
import ReactDOM from 'react-dom'


const thunkCreator = () => (XXX: any, YYY: any) => {
    // 1. Server requests
    // 2. Dispatch actions
}
// App
const App = () => {
    return (
        <>
            <h1>–í —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω –Ω–µ –Ω—É–∂–Ω–æ. –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è üòà</h1>
            <p>–ß–∏—Ç–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∑–∞–¥–∞–Ω–∏—é</p>
        </>
    )
}

ReactDOM.render(<App/>, document.getElementById('root'))

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –í–º–µ—Å—Ç–æ XXX –∏ YYY —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–∞–ø–∏—à–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —Å–∞–Ω–∫—É.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: useCallback state

// dispatch getState



2





import React, {useEffect} from 'react'
import ReactDOM from 'react-dom'
import {AnyAction, applyMiddleware, combineReducers, createStore, Dispatch} from 'redux';
import {Provider, useDispatch, useSelector} from 'react-redux';
import thunk, {ThunkAction, ThunkDispatch} from 'redux-thunk'
import axios from 'axios';


// Types
type TodoType = {
    id: number
    title: string
    completed: boolean
    userId: number
}

// Api
const instance = axios.create({
    baseURL: 'https://jsonplaceholder.typicode.com/'
})

const todosAPI = {
    getTodos() {
        debugger
        return instance.get<TodoType[]>('todos?_limit=15')
    },
    changeTodoStatus(id: number, completed: boolean) {
        return instance.patch(`todos/${id}`, {completed})
    }
}


// Reducer
const initState = [] as TodoType[]

type InitStateType = typeof initState

const todosReducer = (state: InitStateType = initState, action: ActionsType) => {
    switch (action.type) {
        case 'TODOS/GET-TODOS':
            return action.todos

        case 'TODOS/CHANGE-TODO-STATUS':
            return state.map((t) => {
                if (t.id === action.todo.id) {
                    return {...t, completed: action.todo.completed}
                } else {
                    return t
                }
            })

        default:
            return state
    }
}

const getTodosAC = (todos: TodoType[]) => ({type: 'TODOS/GET-TODOS', todos} as const)
const changeTodoStatusAC = (todo: TodoType) => ({
    type: 'TODOS/CHANGE-TODO-STATUS',
    todo
} as const)
type ActionsType = ReturnType<typeof getTodosAC> | ReturnType<typeof changeTodoStatusAC>

// Thunk
const getPostsTC = () => (dispatch: Dispatch) => {
    debugger
    todosAPI.getTodos()
        .then((res) => {
            dispatch(getTodosAC(res.data))
            debugger
        })
}

const changeTodoStatusTC = (id: number, completed: boolean): AppThunk => (dispatch: Dispatch) => {
    todosAPI.changeTodoStatus(id, completed)
        .then((res) => {
            dispatch(changeTodoStatusAC(res.data))
        })
}

// Store
const rootReducer = combineReducers({
    todos: todosReducer,
})

const store = createStore(rootReducer, applyMiddleware(thunk))
type AppStateType = ReturnType<typeof rootReducer>
export type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, AnyAction>
export type AppDispatch = ThunkDispatch<AppStateType, unknown, AnyAction>
export const useAppDispatch = () => useDispatch<AppDispatch>()

// App
export const App = () => {
    const dispatch = useAppDispatch()
    const todos = useSelector<AppStateType, TodoType[]>(state => state.todos)
    debugger
    useEffect(() => {
        dispatch(getPostsTC())
        debugger
    }, [])

    const changeStatusHandler = (id: number, completed: boolean) => {
        dispatch(changeTodoStatusTC(id, completed))
    };

    return (
        <>
            <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
            {
                todos.length ?

                    todos.map((t) => {
                        return (
                            <div style={t.completed ? {color: 'grey'} : {}} key={t.id}>
                                <input type="checkbox"
                                       checked={t.completed}
                                       onChange={() => changeStatusHandler(t.id, !t.completed)}
                                />
                                <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {t.title}
                            </div>
                        )
                    })
                    : <h2>–¢—É–¥—É–ª–∏—Å—Ç–æ–≤ –Ω–µ—Ç—É üò•</h2>
            }
        </>
    )
}

ReactDOM.render(<Provider
    store={store}><App/></Provider>, document.getElementById('root'))

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤,
// –Ω–æ –∏–∑-–∑–∞ –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞.
// –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É.
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: type InitStateType = typeof initState

// dispatch(getPostsTC())




3




import React from 'react'
import ReactDOM from 'react-dom'
import {AnyAction, applyMiddleware, combineReducers, createStore, Dispatch} from 'redux'
import { Provider, useDispatch, useSelector } from 'react-redux'
import axios from 'axios';
import thunk, {ThunkAction, ThunkDispatch} from 'redux-thunk';

// Types
type PhotoType = {
    albumId: number
    id: number
    title: string
    url: string
    thumbnailUrl: string
}

// Api
const instance = axios.create({
    baseURL: 'https://jsonplaceholder.typicode.com/'
})

const photosAPI = {
    getPhotos() {
    debugger
        return instance.get<PhotoType[]>('photos?_limit=3')
    },
}


// Reducer
const initState = [] as PhotoType[]

type InitStateType = typeof initState

const photoReducer = (state: InitStateType = initState, action: ActionsType) => {
    switch (action.type) {
        case 'PHOTO/GET-PHOTOS':
            return action.photos

        default:
            return state
    }
}

const getPhotosAC = (photos: PhotoType[]) => ({type: 'PHOTO/GET-PHOTOS', photos} as const)
type ActionsType = ReturnType<typeof getPhotosAC>

const getPhotosTC = () => (dispatch: Dispatch) => {
    debugger
    photosAPI.getPhotos()
        .then((res) => {
            dispatch(getPhotosAC(res.data))
        })
}

// Store
const rootReducer = combineReducers({
    photo: photoReducer,
})

const store = createStore(rootReducer, applyMiddleware(thunk))
type AppStateType = ReturnType<typeof rootReducer>
export type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, AnyAction>
export type AppDispatch = ThunkDispatch<AppStateType, unknown, AnyAction>
export const useAppDispatch = () => useDispatch<AppDispatch>()

// Components
const App = () => {
    const dispatch = useAppDispatch()
    const photos = useSelector<AppStateType, PhotoType[]>(state => state.photo)
    debugger
    const getPhotosHandler = () => {
        debugger
        dispatch(getPhotosTC())
    };

    return (
        <>
            <h1>üì∏ –§–æ—Ç–æ</h1>
            {
                photos.map(p => {
                    return <div key={p.id}>
                        <b>title</b>: {p.title}
                        <div><img src={p.thumbnailUrl} alt=""/></div>
                    </div>
                })
            }

            <button onClick={getPhotosHandler}>–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</button>
        </>
    )
}


ReactDOM.render(<Provider store={store}> <App/></Provider>, document.getElementById('root'))

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏" –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π,
// –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è.
// –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É.
// Debugger / network / console.log –≤–∞–º –≤ –ø–æ–º–æ—â—å.
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: type InitStateType = typeof initState

//const store = createStore(rootReducer, applyMiddleware(thunk))




4



import React, { useEffect } from 'react'
import ReactDOM from 'react-dom'
import {AnyAction, applyMiddleware, combineReducers, createStore, Dispatch} from 'redux'
import { Provider, useDispatch, useSelector } from 'react-redux'
import thunk, {ThunkAction, ThunkDispatch} from 'redux-thunk'
import axios from 'axios';


// Types
type PostType = {
    body: string
    id: number
    title: string
    userId: number
}

// Api
const instance = axios.create({
    baseURL: 'https://jsonplaceholder.typicode.com/'
})

const postsAPI = {
    getPosts() {
        return instance.get<PostType[]>('posts?_limit=10')
    },
    createPost() {
        const payload = {
            body: 'new post body',
            title: 'new post title',
            userId: 1
        }
        return instance.post('posts', payload)
    }
}

// Reducer
const initState = [] as PostType[]

type InitStateType = typeof initState

const postsReducer = (state: InitStateType = initState, action: ActionsType) => {
    switch (action.type) {
        case 'POSTS/GET-POSTS':
            return action.posts

        case 'POSTS/CREATE-POST':
            return [action.post, ...state]

        default:
            return state
    }
}


const getPostsAC = (posts: PostType[]) => ({type: 'POSTS/GET-POSTS', posts} as const)
const createPostAC = (post: PostType) => ({type: 'POSTS/CREATE-POST', post} as const)

type ActionsType = ReturnType<typeof getPostsAC> | ReturnType<typeof createPostAC>

const getPostsTC = () => (dispatch: Dispatch) => {
    postsAPI.getPosts()
        .then((res) => {
            dispatch(getPostsAC(res.data))
        })
}

const addPostTC = () => (dispatch: Dispatch) => {
    postsAPI.createPost()
        .then((res) => {
            dispatch(createPostAC(res.data))
        })
}

// Store
const rootReducer = combineReducers({
    posts: postsReducer,
})

const store = createStore(rootReducer, applyMiddleware(thunk))
type AppStateType = ReturnType<typeof rootReducer>
export type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, AnyAction>
export type AppDispatch = ThunkDispatch<AppStateType, unknown, AnyAction>
export const useAppDispatch = () => useDispatch<AppDispatch>()


// App
const App = () => {
    const dispatch = useAppDispatch()
    const posts = useSelector<AppStateType, PostType[]>(state => state.posts)

    useEffect(() => {
        dispatch(getPostsTC())
    }, [])

    const addPostHandler = () => {
        dispatch(addPostTC())
    };

    return (
        <>
            <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
            <button style={{marginBottom: '10px'}} onClick={addPostHandler}>–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç</button>
            {
                posts.map(p => {
                    return <div key={p.id}><b>title</b>: {p.title}</div>
                })
            }
        </>
    )
}

ReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'))

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç" –ø–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å—Å—è,
// –Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è alert.
// –í–º–µ—Å—Ç–æ alerta –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ—Å—Ç –¥–æ–±–∞–≤–ª—è–ª—Å—è.
// –ü—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: return instance.get<PostType[]>('posts?_limit=10')

// dispatch(addPostTC())



5


import React, { useEffect } from 'react';
import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
import axios from 'axios';
import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';

// Types
type PostType = {
    body: string
    id: number
    title: string
    userId: number
}

// Api
const instance = axios.create({
    baseURL: 'https://jsonplaceholder.typicode.com/'
})

const postsAPI = {
    getPosts() {
        return instance.get<PostType[]>('posts?_limit=15')
    },
}


// Reducer
const initState = [] as PostType[]

type InitStateType = typeof initState

const postsReducer = (state: InitStateType = initState, action: GetPostsActionType): InitStateType => {
    switch (action.type) {
        case 'POSTS/GET-POSTS':
            return action.posts
    }
    return state
}

const getPostsAC = (posts: PostType[]) => ({type: 'POSTS/GET-POSTS', posts} as const)
type GetPostsActionType = ReturnType<typeof getPostsAC>

const getPostsTC = (): AppThunk => (dispatch) => {
    postsAPI.getPosts()
        .then((res) => {
            dispatch(getPostsAC(res.data))
        })
}

// Store
const rootReducer = combineReducers({
    posts: postsReducer,
})

const store = createStore(rootReducer, applyMiddleware(thunk))
type RootState = ReturnType<typeof store.getState>
type AppDispatch = ThunkDispatch<RootState, unknown, GetPostsActionType>
type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, GetPostsActionType>
const useAppDispatch = () => useDispatch<AppDispatch>()
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector

// App
const App = () => {
    const dispatch = useAppDispatch()
    const posts = useAppSelector(state => state.posts)

    useEffect(() => {
        dispatch(getPostsTC())
    }, [])

    return (
        <>
            <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
            {
                posts.length
                    ? posts.map(p => {
                        return <div key={p.id}><b>title</b>: {p.title}</div>
                    })
                    : <h2>–ü–æ—Å—Ç–æ–≤ –Ω–µ—Ç—É üò•</h2>
            }
        </>
    )
}

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(<Provider store={store}> <App/></Provider>)

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤,
// –Ω–æ –∏–∑-–∑–∞ –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞.

// –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: type InitStateType = typeof initState

// P.S. –≠—Ç–∞ –æ—à–∏–±–∫–∞ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏, —Å—Ç—É–¥–µ–Ω—Ç—ã —Ç–∞–∫ —á–∞—Å—Ç–æ –æ—à–∏–±–∞—é—Ç—Å—è –∏ –Ω–µ –º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å –≤ —á–µ–º –¥–µ–ª–æ.

// dispatch(getPostsTC())


6



import axios from 'axios'
import React, { useEffect } from 'react'
import ReactDOM from 'react-dom'
import { Provider, useDispatch, useSelector } from 'react-redux';
import {AnyAction, applyMiddleware, combineReducers, createStore} from 'redux';
import thunk, {ThunkAction, ThunkDispatch} from 'redux-thunk';

// Types
type CommentType = {
    postId: number
    id: number
    name: string
    email: string
    body: string
}

// Api
const instance = axios.create({
    baseURL: 'https://jsonplaceholder.typicode.com/'
})

const commentsAPI = {
    getComments() {
        return instance.get<CommentType[]>('comments?_limit=10')
    }
}

// Reducer
const initState = [] as CommentType[]

type InitStateType = typeof initState

const commentsReducer = (state: InitStateType = initState, action: ActionsType) => {
    switch (action.type) {
        case 'COMMENTS/GET-COMMENTS':
            return action.comments
        default:
            return state
    }
}

const getCommentsAC = (comments: CommentType[]) => ({type: 'COMMENTS/GET-COMMENTS', comments} as const)
type ActionsType = ReturnType<typeof getCommentsAC>

const getCommentsTC = (): ThunkAction<void, AppStateType, unknown, ActionsType> => (dispatch) => {
    commentsAPI.getComments()
        .then((res) => {
            dispatch(getCommentsAC(res.data))
        })
}


// Store
const rootReducer = combineReducers({
    comments: commentsReducer,
})

const store = createStore(rootReducer, applyMiddleware(thunk))
type AppStateType = ReturnType<typeof rootReducer>
export type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, AnyAction>
export type AppDispatch = ThunkDispatch<AppStateType, unknown, AnyAction>
export const useAppDispatch = () => useDispatch<AppDispatch>()


// App
export const App = () => {

    const comments = useSelector<AppStateType, CommentType[]>(state => state.comments)
    const dispatch = useAppDispatch()

    useEffect(() => {
        dispatch(getCommentsTC())
    }, [])

    return (
        <>
            <h1>üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h1>
            {
                comments.map(c => {
                    return <div key={c.id}><b>Comment</b>: {c.body} </div>
                })
            }
        </>
    )
}

ReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'))

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å—Ç–æ–∏—Ç –≤ —Ç–æ–º —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –≤ –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤—ã–π —Ç–∏–ø ThunkAction<any, any, any, any>.
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ any, any, any, any —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å thunk creator?
// –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: unknown status isDone void
// void AppStateType unknown ActionsType




7



import axios from 'axios'
import React, { useEffect } from 'react'
import ReactDOM from 'react-dom'
import { Provider, useDispatch, useSelector } from 'react-redux';
import { applyMiddleware, combineReducers, createStore } from 'redux';
import thunk, { ThunkDispatch } from 'redux-thunk';

// Types
type CommentType = {
    postId: number
    id: number
    name: string
    email: string
    body: string
}

// Api
const instance = axios.create({
    baseURL: 'https://jsonplaceholder.typicode.com/'
})

const commentsAPI = {
    getComments() {
        return instance.get<CommentType[]>('comments?_limit=10')
    }
}

// Reducer
const initState = [] as CommentType[]

type InitStateType = typeof initState

const commentsReducer = (state: InitStateType = initState, action: ActionsType) => {
    switch (action.type) {
        case 'COMMENTS/GET-COMMENTS':
            return action.comments
    }
    return state
}

const getCommentsAC = (comments: CommentType[]) => ({type: 'COMMENTS/GET-COMMENTS', comments} as const)
type ActionsType = ReturnType<typeof getCommentsAC>

const getCommentsTC = () => (dispatch: ThunkDispatch<any, any, any>) => {
    commentsAPI.getComments()
        .then((res) => {
            dispatch(getCommentsAC(res.data))
        })
}


// Store
const rootReducer = combineReducers({
    comments: commentsReducer,
})

const store = createStore(rootReducer, applyMiddleware(thunk))
type AppStateType = ReturnType<typeof rootReducer>


// App
export const App = () => {

    const comments = useSelector<AppStateType, CommentType[]>(state => state.comments)
    const dispatch = useDispatch()

    useEffect(() => {
        dispatch(getCommentsTC())
    }, [])

    return (
        <>
            <h1>üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h1>
            {
                comments.map(c => {
                    return <div key={c.id}><b>Comment</b>: {c.body} </div>
                })
            }
        </>
    )
}


ReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'))

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å—Ç–æ–∏—Ç –≤ —Ç–æ–º —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –≤ –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤—ã–π —Ç–∏–ø ThunkDispatch<any, any, any>.
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ any, any, any —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å dispatch ?
// –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: unknown status isDone

// AppStateType unknown ActionsType

8



import React, { useEffect } from 'react'
import ReactDOM from 'react-dom'
import {AnyAction, applyMiddleware, combineReducers, createStore, Dispatch} from 'redux'
import { Provider, useDispatch, useSelector } from 'react-redux'
import axios from 'axios';
import thunk, {ThunkAction, ThunkDispatch} from 'redux-thunk';


// Types
type PostType = {
    body: string
    id: number
    title: string
    userId: number
}

// Api
const instance = axios.create({
    baseURL: 'https://jsonplaceholder.typicode.com/'
})

const postsAPI = {
    getPosts() {
        return instance.get<PostType[]>('posts?_limit=15')
    },
    updatePostTitle(post: PostType) {
        return instance.put<PostType>(`posts/${post.id}`, post)
    }
}


// Reducer
const initState = [] as PostType[]

type InitStateType = typeof initState

const postsReducer = (state: InitStateType = initState, action: ActionsType) => {
    switch (action.type) {
        case 'POSTS/GET-POSTS':
            return action.posts

        case 'POSTS/UPDATE-POST-TITLE':
            debugger
            let a = state.map((p) => {
                if (p.id === action.post.id) {
                    return {...p, title: action.post.title}
                } else {
                    return p
                }
            })
            debugger
            return a

        default:
            return state
    }
}

const getPostsAC = (posts: PostType[]) => ({type: 'POSTS/GET-POSTS', posts} as const)
const updatePostTitleAC = (post: PostType) => ({type: 'POSTS/UPDATE-POST-TITLE', post} as const)
type ActionsType = ReturnType<typeof getPostsAC> | ReturnType<typeof updatePostTitleAC>

const getPostsTC = () => (dispatch: Dispatch) => {
    postsAPI.getPosts()
        .then((res) => {
            dispatch(getPostsAC(res.data))
        })
}

const updatePostTC = (postId: number) => (dispatch: Dispatch, getState: () => AppStateType) => {
    try {
        const currentPost = getState().posts.find((p: PostType) => {
            return p.id === postId
        })

        if (currentPost) {
            const payload = {...currentPost, title: '–õ–µ—Ç–∏–º üöÄ'}
            postsAPI.updatePostTitle(payload)
                .then((res) => {
                    dispatch(updatePostTitleAC(res.data))
                })
        }
    } catch (e) {
        alert('–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å üò¢')
    }

}

// Store
const rootReducer = combineReducers({
    posts: postsReducer,
})

const store = createStore(rootReducer, applyMiddleware(thunk))
type AppStateType = ReturnType<typeof rootReducer>
export type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, AnyAction>
export type AppDispatch = ThunkDispatch<AppStateType, unknown, AnyAction>
export const useAppDispatch = () => useDispatch<AppDispatch>()


// App
const App = () => {
    const dispatch = useAppDispatch()
    const posts = useSelector<AppStateType, PostType[]>(state => state.posts)

    useEffect(() => {
        dispatch(getPostsTC())
    }, [])

    const updatePostHandler = (postId: number) => {
        dispatch(updatePostTC(postId))
    }

    return (
        <>
            <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
            {
                posts.map(p => {
                    return <div key={p.id}>
                        <b>title</b>: {p.title}
                        <button onClick={() => updatePostHandler(p.id)}>–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç</button>
                    </div>
                })
            }
        </>
    )
}

ReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'))

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ alert —Å –æ—à–∏–±–∫–æ–π.
// Debugger / network / console.log –≤–∞–º –≤ –ø–æ–º–æ—â—å
// –ù–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: const payload = {...currentPost, tile: '–õ–µ—Ç–∏–º üöÄ'}
// –ü–æ–¥—Å–∫–∞–∑–∫–∞. –ò–∑–±–∞–≤—å—Ç–µ—Å—å –æ—Ç –≤—Å–µ—Ö any –∏ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç —Å–∞–º–æ —Å–æ–±–æ–π üòâ

// const currentPost = getState().posts.find((p: PostType) => {

9

import React from 'react'
import ReactDOM from 'react-dom'
import {AnyAction, applyMiddleware, combineReducers, createStore, Dispatch} from 'redux'
import { Provider, useDispatch, useSelector } from 'react-redux'
import axios from 'axios';
import thunk, {ThunkAction, ThunkDispatch} from 'redux-thunk';

// Types
type PhotoType = {
    albumId: number
    id: number
    title: string
    url: string
    thumbnailUrl: string
}

// Api
const instance = axios.create({
    baseURL: 'https://jsonplaceholder.typicode.com/'
})

const photosAPI = {
    getPhotos() {
        return instance.get<PhotoType[]>('photos?_limit=3')
    },
}


// Reducer
const initState = [] as PhotoType[]

type InitStateType = typeof initState

const photoReducer = (state: InitStateType = initState, action: ActionsType) => {
    switch (action.type) {
        case 'PHOTO/GET-PHOTOS':
            return action.photos

        default:
            return state
    }
}

const getPhotosAC = (photos: PhotoType[]) => ({type: 'PHOTO/GET-PHOTOS', photos} as const)
type ActionsType = ReturnType<typeof getPhotosAC>

const getPhotosTC = () => (dispatch: Dispatch) => {
    photosAPI.getPhotos()
        .then((res) => {
            dispatch(getPhotosAC(res.data))
        })
}

// Store
const rootReducer = combineReducers({
    photo: photoReducer,
})

const store = createStore(rootReducer, applyMiddleware(thunk))
type AppStateType = ReturnType<typeof rootReducer>
export type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppStateType, unknown, AnyAction>
export type AppDispatch = ThunkDispatch<AppStateType, unknown, AnyAction>
export const useAppDispatch = () => useDispatch<AppDispatch>()


// App
const App = () => {
    const dispatch = useAppDispatch()
    const photos = useSelector<AppStateType, PhotoType[]>(state => state.photo)

    const getPhotosHandler = () => {
        dispatch(getPhotosTC())
    };

    return (
        <>
            <h1>üì∏ –§–æ—Ç–æ</h1>
            {
                photos.map(p => {
                    return <div key={p.id}>
                        <b>title</b>: {p.title}
                        <div><img src={p.thumbnailUrl} alt=""/></div>
                    </div>
                })
            }

            <button onClick={getPhotosHandler}>–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</button>
        </>
    )
}


ReactDOM.render(<Provider store={store}> <App/></Provider>, document.getElementById('root'))

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏" –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π,
// –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è.
// –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É.
// Debugger / network / console.log –≤–∞–º –≤ –ø–æ–º–æ—â—å.
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: type InitStateType = typeof initState

// const store = createStore(rootReducer, applyMiddleware(thunk))