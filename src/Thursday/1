import axios from 'axios'
import React, { useEffect, useState } from 'react'
import ReactDOM from 'react-dom'

// Types
type TodoType = {
    userId: number
    id: string
    title: boolean
    completed: boolean
}


// Api
const instance = axios.create({
    baseURL: 'https://jsonplaceholder.typicode.com/'
})

const todosAPI = {
    getTodos() {
        return instance.get<TodoType[]>('todos?_limit=15')
    }
}


// App
export const App = () => {

    const [todos, setTodos] = useState<Array<TodoType>>([])

    useEffect(() => {
        todosAPI.getTodos().then((res) => setTodos(res.data))
    }, [])


    return (
        <>
            <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
            {
                todos.map((t) => {
                    return (
                        <div style={t.completed ? {color: 'grey'} : {}} key={t.id}>
                            <input type="checkbox" checked={t.completed}/>
                            <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {t.title}
                        </div>
                    )
                })
            }
        </>
    )
}


ReactDOM.render(<App/>, document.getElementById('root'))

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –ø–æ –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—ã–ª–æ –¥–æ–ø—É—â–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫.
// –ù–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –≤ TodoType, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞.
// Debugger / network / –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤–∞–º –≤ –ø–æ–º–æ—â—å

// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: id status isDone




2







import axios from 'axios'
import React, { useEffect, useState } from 'react'
import ReactDOM from 'react-dom'

// Types
type PostType = {
    body: string
    id: number
    title: string
    userId: number
}


// Api
const instance = axios.create({
    baseURL: 'https://jsonplaceholder.typicode.com/'
})

const postsAPI = {
    getPosts() {
        return instance.get<CommentType[]>('/posts')
    },
}


// App
export const App = () => {

    const [posts, setPosts] = useState<PostType[]>([])

    useEffect(() => {
        postsAPI.getPosts()
            .then((res: any) => {
                setPosts(res.data)
            })
    }, [])


    return (
        <>
            <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
            {
                posts.length
                    ? posts.map(p => {
                        return <div key={p.id}><b>title</b>: {p.title}</div>
                    })
                    : <h2>–ü–æ—Å—Ç–æ–≤ –Ω–µ—Ç—É üò•</h2>
            }
        </>
    )
}


ReactDOM.render(<App/>, document.getElementById('root'))

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
// –¢–∏–ø–∏–∑–∞—Ü–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ –∏ —É–∫–∞–∑–∞—Ç—å (–≤ –æ—Ç–≤–µ—Ç–∞—Ö —É—á—Ç–µ–Ω—ã –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞).
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: return instance.put('todolists/1')
        return instance.get('/posts') ??? –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç





3





import axios from 'axios'
import React, { ChangeEvent, useEffect, useState } from 'react'
import ReactDOM from 'react-dom'

// Types
type CommentType = {
    postId: number
    id: number
    name: string
    email: string
    body: string
}

// Api
const instance = axios.create({
    baseURL: 'https://jsonplaceholder.typicode.com/'
})

const commentsAPI = {
    getComments() {
        return instance.get<CommentType[]>('comments?_limit=10')
    },
    createComment(body: string) {
        const payload = {
            body,
            email: 'test@gmail.com',
            name: 'Name',
            postId: Math.random()
        }
        return instance.post('/comments', {body})
    }
}


// App
export const App = () => {

    const [comments, setComments] = useState<CommentType[]>([])
    const [commentBody, setCommentBody] = useState('')

    useEffect(() => {
        commentsAPI.getComments()
            .then((res) => {
                setComments(res.data)
            })
    }, [])

    const createPostHandler = () => {
        commentsAPI.createComment(commentBody)
            .then((res: any) => {
                const newComment = res.data
                setComments([newComment, ...comments])
                setCommentBody('')
            })
    };

    const createTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {
        setCommentBody(e.currentTarget.value)
    };

    return (
        <>
            <h1>üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h1>

            <div style={{marginBottom: '15px'}}>
                <input style={{width: '300px'}}
                       type="text"
                       value={commentBody}
                       placeholder={'–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç—Ä–∞—Ä–∏–π'}
                       onChange={createTitleHandler}
                />
                <button style={{marginLeft: '15px'}}
                        onClick={() => createPostHandler()}>
                    –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                </button>
            </div>

            {
                comments.map(c => {
                    return <div key={c.id}><b>Comment</b>: {c.body} </div>
                })
            }
        </>
    )
}

ReactDOM.render(<App/>, document.getElementById('root'))

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.
// –¢–∏–ø–∏–∑–∞—Ü–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ –∏ —É–∫–∞–∑–∞—Ç—å (–≤ –æ—Ç–≤–µ—Ç–∞—Ö —É—á—Ç–µ–Ω—ã –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞).
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: return Promise.resolve<PostType[]>(data)
        return instance.post('/comments', {body})  –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç =(







4





import axios from 'axios'
import React, { useEffect, useState } from 'react'
import ReactDOM from 'react-dom'

// Types
type PostType = {
    body: string
    id: number
    title: string
    userId: number
}


// Api
const instance = axios.create({
    baseURL: 'https://jsonplaceholder.typicode.com/'
})

const postsAPI = {
    getPosts() {
        return instance.get<PostType[]>('posts')
    },
    deletePost(id: number) {
        return instance.delete(`posts/${id}`)
    }
}


// App
export const App = () => {

    const [posts, setPosts] = useState<PostType[]>([])

    useEffect(() => {
        postsAPI.getPosts()
            .then((res) => {
                setPosts(res.data)
            })
    }, [])

    const deletePostHandler = (id: number) => {
        postsAPI.deletePost(id)
            .then((res) => {
                const newPostsArr = posts.filter(p => p.id !== id)
                setPosts(newPostsArr)
            })
    };

    return (
        <>
            <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
            {posts.map(p => {
                return (
                    <div key={p.id}>
                        <b>title</b>: {p.title}
                        <button style={{marginLeft: '15px'}}
                                onClick={() => deletePostHandler(p.id)}>
                            x
                        </button>
                    </div>
                )
            })}
        </>
    )
}


ReactDOM.render(<App/>, document.getElementById('root'))

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–æ—á–µ–º—É –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è post –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è (—Ö) ?
// –ù–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: return instance.put('posts/1')
        return instance.delete(`posts/${id}`) –ø—Ä–∞–≤–∏–ª—å–Ω–æ



5


import axios from 'axios'
import React, { useEffect, useState } from 'react'
import ReactDOM from 'react-dom'

// Types
type PhotoType = {
    albumId: number
    id: number
    title: string
    url: string
    thumbnailUrl: string
}


// Api
const instance = axios.create({
    baseURL: 'https://jsonplaceholder.typicode.com/'
})

const photosAPI = {
    getPhoto() {
        return instance.get<PhotoType>('photos/1')
    },
    updatePhotoTitle(payload: PhotoType) {
        return instance.put<PhotoType>(`/photos/${payload.id}`, payload)
    }
}


// App
export const App = () => {

    const [photo, setPhoto] = useState<PhotoType | null>(null)

    useEffect(() => {
        photosAPI.getPhoto()
            .then((res) => {
                setPhoto(res.data)
            })
    }, [])

    const updatePhotoHandler = () => {
        const payload = {
            title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ üöÄ',
            albumId: 1,
            id: 1,
            url: "https://via.placeholder.com/600/92c952",
            thumbnailUrl: "https://via.placeholder.com/150/92c952"
        }
        photosAPI.updatePhotoTitle(payload)
            .then((res) => {
                setPhoto(res.data)
            })
    };

    return (
        <>
            <h1>üì∏ –§–æ—Ç–æ</h1>
            <div>
                <div style={{marginBottom: '15px'}}>
                    <b>title</b>: {photo?.title}
                    <button style={{marginLeft: '15px'}}
                            onClick={updatePhotoHandler}>
                        –û–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                    </button>
                </div>
                <div><img src={photo?.url} alt=""/></div>
            </div>
        </>
    )
}


ReactDOM.render(<App/>, document.getElementById('root'))

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏" title –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
// –Ω–∞ –Ω–∞–¥–ø–∏—Å—å "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ üöÄ", –Ω–æ –∏–∑-–∑–∞ –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞
//
// –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: photosAPI.updatePhotoTitle(id, title)
        return instance.put<PhotoType>(`/photos/${payload.id}`, payload) –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç !!! ((


6

import axios from 'axios'
import React, { useEffect, useState } from 'react'
import ReactDOM from 'react-dom'

// Types
type PhotoType = {
    albumId: number
    id: number
    title: string
    url: string
    thumbnailUrl: string
}


// Api
const instance = axios.create({
    baseURL: 'https://jsonplaceholder.typicode.com/'
})

const photosAPI = {
    getPhotos(page: number) {
        return instance.get<PhotoType[]>(`photos?_limit=2&_page=${page}`)
    }
}


// App

const buttons = [
    {id: 1, title: '1'},
    {id: 2, title: '2'},
    {id: 3, title: '3'},
]

export const App = () => {

    const [photos, setPhotos] = useState<PhotoType[]>([])
    const [currentPage, setCurrentPage] = useState(1)

    useEffect(() => {
        photosAPI.getPhotos(currentPage)
            .then((res) => {
                setPhotos(res.data)
            })
    }, [currentPage])

    const setPageHandler = (page: number) => {
        setCurrentPage(page)
    };

    return (
        <>
            <h1>üì∏ –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–∫</h1>
            {/* Photos */}
            {
                photos.map(p => {
                    return <div style={{marginBottom: '25px'}} key={p.id}>
                        <b>title</b>: {p.title}
                        <div><img src={p.thumbnailUrl} alt=""/></div>
                    </div>
                })
            }

            {/* Buttons */}
            {
                buttons.map(b => {
                    return (
                        <button key={b.id}
                                style={b.id === currentPage ? {backgroundColor: 'lightblue'} : {}}
                                onClick={() => setPageHandler(b.id)}>
                            {b.title}
                        </button>
                    )
                })
            }
        </>
    )
}


ReactDOM.render(<App/>, document.getElementById('root'))

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
// –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º, –∫–æ–Ω—Ç–µ–Ω—Ç (–æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ç–æ–∫) –¥–æ–ª–∂–µ–Ω –º–µ–Ω—è—Ç—å—Å—è.
// –ü–æ–¥—Å–∫–∞–∑–∫–∞. –í –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–æ–¥–∞ –¥–æ–ø—É—â–µ–Ω–æ 2 –æ—à–∏–±–∫–∏.
// –ó–∞–¥–∞—á–∞: –Ω–∞–π—Ç–∏ —ç—Ç–∏ –æ—à–∏–±–∫–∏, –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: const [currentPage, setCurrentPage] = useState(page)
        return instance.get<PhotoType[]>(`photos?_limit=2&_page=${page}`) –ø—Ä–∞–≤–∏–ª—å–Ω–æ



7




import axios from 'axios'
import React, { useEffect, useState } from 'react'
import ReactDOM from 'react-dom'

// Types
type TodoType = {
    id: number
    title: string
    completed: boolean
    userId: number
}


// Api
const instance = axios.create({
    baseURL: 'https://jsonplaceholder.typicode.com/'
})

const todosAPI = {
    getTodo(todoId: number) {
        return instance.get<TodoType[]>(`todos/${todoId}`)
    }
}


// App
export const App = () => {

    const [todo, setTodo] = useState<TodoType | null>(null)
    const [error, setError] = useState<string>('')

    useEffect(() => {
        const todoId = 4
        todosAPI.getTodo(todoId)
            .then((res: any) => setTodo(res.data))
            .catch(e => {
                setError('–û—à–∏–±–∫–∞ üò∞. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π network üòâ')
            })
    }, [])


    return (
        <>
            <h2>‚úÖ –¢—É–¥—É–ª–∏—Å—Ç</h2>
            {
                !!todo
                    ? <div>
                        <div style={todo?.completed ? {color: 'grey'} : {}} key={todo?.id}>
                            <input type="checkbox" checked={todo?.completed}/>
                            <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {todo?.title}
                        </div>
                        <h2>–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å. –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è üöÄ</h2>
                    </div>
                    : <h2 style={{ color: 'red' }}>{error}</h2>
            }

        </>
    )
}


ReactDOM.render(<App/>, document.getElementById('root'))

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –°—Ç—É–¥–µ–Ω—Ç –ø–æ –Ω–µ–æ–ø—ã—Ç–Ω–æ—Å—Ç–∏ –¥–æ–ø—É—Å—Ç–∏–ª –æ–¥–Ω—É –º–∞–ª–µ–Ω—å–∫—É—é –æ—à–∏–±–∫—É, –Ω–æ –∏–∑-–∑–∞ –Ω–µ–µ –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω —Ç—É–¥—É–ª–∏—Å—Ç.
// –ù–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞
// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: baseURL: 'https://jsonplaceholder.typicode.com/todos'

// P.S. –≠—Ç–∞ –æ—à–∏–±–∫–∞ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏, —Å—Ç—É–¥–µ–Ω—Ç—ã —á–∞—Å—Ç–æ –æ—à–∏–±–∞—é—Ç—Å—è –∏ –Ω–µ –º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å –≤ —á–µ–º –¥–µ–ª–æ.
        return instance.get<TodoType[]>(`todos/${todoId}`) –ø—Ä–∞–≤–∏–ª—å–Ω–æ


8



import axios from 'axios'
import React, { useEffect, useState } from 'react'
import ReactDOM from 'react-dom'

// TYPES
type UserType = {
    avatar: string
    email: string
    first_name: string
    id: 1
    last_name: string
}

type ColorType = {
    color: string
    id: number
    name: string
    pantone_value: string
    year: number
}

type UsersResponseType = {
    total: number
    total_pages: number
    page: number
    per_page: number
    support: {
        url: string
        text: string
    }
    url: 'https://reqres.in/#support-heading'
    data: UserType[]
}

type ColorsResponseType = {
    total: number
    total_pages: number
    page: number
    per_page: number
    support: {
        url: string
        text: string
    }
    url: 'https://reqres.in/#support-heading'
    data: ColorType[]
}

type CommonResponseType<T> = {
    total: number
    total_pages: number
    page: number
    per_page: number
    support: {
        url: string
        text: string
    }
    url: 'https://reqres.in/#support-heading'
    data: T
}

// Api
const instance = axios.create({
    baseURL: 'https://reqres.in/api/'
})

const reqresAPI = {
    getUsers() {
        return instance.get<CommonResponseType<UserType[]>>('users')
    },
    getColors() {
        return instance.get<CommonResponseType<ColorType[]>>('colors')
    }
}


// App
const App = () => {
    return (
        <>
            <h1>Reqres API</h1>
            <Users/>
            <Colors/>
        </>
    )
}

const Users = () => {

    const [users, setUsers] = useState<UserType[]>([])

    useEffect(() => {
        reqresAPI.getUsers()
            .then((res) => setUsers(res.data.data))
    }, [])

    return (
        <div>
            <h2>Users</h2>
            <div style={{display: 'flex'}}>
                {
                    users.map(u => {
                        return (
                            <div key={u.id} style={{marginRight: '25px'}}>
                                <p>{u.first_name}</p>
                                <img src={u.avatar} alt=""/>
                            </div>
                        )
                    })
                }</div>
        </div>
    )
}

const Colors = () => {

    const [colors, setColors] = useState<ColorType[]>([])

    useEffect(() => {
        reqresAPI.getColors()
            .then((res) => setColors(res.data.data))
    }, [])

    return (
        <div>
            <h2>Colors</h2>
            <div style={{display: 'flex'}}>
                {
                    colors.map(c => {
                        return (
                            <div key={c.id} style={{marginRight: '25px'}}>
                                <p>{c.name}</p>
                                <div style={{backgroundColor: c.color, width: '128px', height: '30px'}}>
                                    <b>{c.color}</b>
                                </div>
                            </div>
                        )
                    })
                }</div>
        </div>
    )
}


ReactDOM.render(<App/>, document.getElementById('root'))

// –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ 2 —Å–ø–∏—Å–∫–∞: Users –∏ Colors.
// –° –Ω–∏–º–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞ UsersResponseType –∏ ColorsResponseType.
// –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –Ω–∞ –ª–∏—Ü–æ.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤—ã–π —Ç–∏–ø CommonResponseType –∏ –∑–∞–º–µ–Ω–∏—Ç—å –∏–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ —Ç–∏–ø—ã.
// –û—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤ –≤ —Ç–∏–ø–∞—Ö –º–µ–Ω—è—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ (–ø–æ –ø—Ä–∏—á–∏–Ω–µ —á—Ç–æ –Ω–∞–º –±—É–¥–µ—Ç —Ç—è–∂–µ–ª–æ –ø–µ—Ä–µ–±—Ä–∞—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã :) )
// –ü–∞—Ä–∞–º–µ—Ç—Ä —Ç–∏–ø –Ω–∞–∑–æ–≤–∏—Ç–µ –±—É–∫–≤–æ–π T

// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ –Ω—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤—ã–π —Ç–∏–ø CommonResponseType

// –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:
// type CommonResponseType<T> = {
//     total: number
//     total_pages: number
//     page: number
//     per_page: number
//     support: {
//         url: string
//         text: string
//     }
//     url: 'https://reqres.in/#support-heading'
//     data: T
// }
 –ø—Ä–∞–≤–∏–ª—å–Ω–æ